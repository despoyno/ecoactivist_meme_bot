import asyncio
import logging
import random
from datetime import datetime
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from TOKEN import API_TOKEN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(level=logging.INFO)

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä–µ–π –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã) ---
# –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö (SQLite, PostgreSQL –∏ —Ç.–¥.)
users_data = {}  # {user_id: {'points': int, 'level': int, 'completed_tasks': set()}}
user_tasks = {}  # {user_id: {'task_id': int, 'message_id': int}}

# "–¢–∞–±–ª–∏—Ü–∞" —Å –∑–∞–¥–∞–Ω–∏—è–º–∏
TASKS = {
    1: {"text": "‚ôªÔ∏è –°–µ–≥–æ–¥–Ω—è –æ—Ç—Å–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –º—É—Å–æ—Ä: –æ—Ç–¥–µ–ª–∏—Ç–µ –ø–ª–∞—Å—Ç–∏–∫, –±—É–º–∞–≥—É –∏ —Å—Ç–µ–∫–ª–æ.", "points": 15,
        "category": "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞"},
    2: {"text": "üëú –í–æ–∑—å–º–∏—Ç–µ —Å —Å–æ–±–æ–π –≤ –º–∞–≥–∞–∑–∏–Ω –º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—É—é —Å—É–º–∫—É (—à–æ–ø–ø–µ—Ä) –≤–º–µ—Å—Ç–æ –ø–æ–∫—É–ø–∫–∏ –ø–ª–∞—Å—Ç–∏–∫–æ–≤–æ–≥–æ –ø–∞–∫–µ—Ç–∞.",
        "points": 10, "category": "–ü–ª–∞—Å—Ç–∏–∫"},
    3: {"text": "üí° –í—ã–∫–ª—é—á–∞–π—Ç–µ —Å–≤–µ—Ç, –≤—ã—Ö–æ–¥—è –∏–∑ –∫–æ–º–Ω–∞—Ç—ã, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–∞ –º–∏–Ω—É—Ç–∫—É.", "points": 5, "category": "–≠–Ω–µ—Ä–≥–∏—è"},
    4: {"text": "üíß –ü—Ä–∏–º–∏—Ç–µ –¥—É—à –Ω–∞ 2 –º–∏–Ω—É—Ç—ã –±—ã—Å—Ç—Ä–µ–µ –æ–±—ã—á–Ω–æ–≥–æ, —á—Ç–æ–±—ã —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å –≤–æ–¥—É.", "points": 10, "category": "–í–æ–¥–∞"},
    5: {"text": "‚òï –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—É—é –∫—Ä—É–∂–∫—É –¥–ª—è –∫–æ—Ñ–µ –∏–ª–∏ —á–∞—è –Ω–∞–≤—ã–Ω–æ—Å.", "points": 15, "category": "–ü–ª–∞—Å—Ç–∏–∫"},
    6: {"text": "üîå –û—Ç–∫–ª—é—á–∏—Ç–µ –≤—Å–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —ç–ª–µ–∫—Ç—Ä–æ–ø—Ä–∏–±–æ—Ä—ã –∏–∑ —Ä–æ–∑–µ—Ç–æ–∫ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º.", "points": 10,
        "category": "–≠–Ω–µ—Ä–≥–∏—è"},
    7: {"text": "üìù –°–æ—Å—Ç–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø–µ—Ä–µ–¥ –ø–æ—Ö–æ–¥–æ–º –≤ –º–∞–≥–∞–∑–∏–Ω, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∏–º–ø—É–ª—å—Å–∏–≤–Ω—ã—Ö –∏ –Ω–µ–Ω—É–∂–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫.",
        "points": 5, "category": "–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ"},
    8: {"text": "üö≤ –ü—Ä–æ–π–¥–∏—Ç–µ—Å—å –ø–µ—à–∫–æ–º –∏–ª–∏ –ø–æ–µ–∑–∂–∞–π—Ç–µ –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ –≤–º–µ—Å—Ç–æ –∫–æ—Ä–æ—Ç–∫–æ–π –ø–æ–µ–∑–¥–∫–∏ –Ω–∞ –º–∞—à–∏–Ω–µ –∏–ª–∏ –∞–≤—Ç–æ–±—É—Å–µ.",
        "points": 20, "category": "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"},
}

# "–¢–∞–±–ª–∏—Ü–∞" —Å —ç–∫–æ-—Å–æ–≤–µ—Ç–∞–º–∏
TIPS = {
    "–≠–Ω–µ—Ä–≥–∏—è": [
        "–ó–∞–º–µ–Ω–∏—Ç–µ –ª–∞–º–ø—ã –Ω–∞–∫–∞–ª–∏–≤–∞–Ω–∏—è –Ω–∞ —Å–≤–µ—Ç–æ–¥–∏–æ–¥–Ω—ã–µ (LED) ‚Äî –æ–Ω–∏ –ø–æ—Ç—Ä–µ–±–ª—è—é—Ç –¥–æ 85% –º–µ–Ω—å—à–µ —ç–Ω–µ—Ä–≥–∏–∏.",
        "–ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ –Ω–æ–≤–æ–π —Ç–µ—Ö–Ω–∏–∫–∏ –æ–±—Ä–∞—â–∞–π—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∫–ª–∞—Å—Å —ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (A, A+, A++).",
        "–ù–µ –æ—Å—Ç–∞–≤–ª—è–π—Ç–µ –∑–∞—Ä—è–¥–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ —Ä–æ–∑–µ—Ç–∫–µ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∑–∞—Ä—è–¥–∫–∏ –≥–∞–¥–∂–µ—Ç–∞."
    ],
    "–í–æ–¥–∞": [
        "–ó–∞–∫—Ä—ã–≤–∞–π—Ç–µ –∫—Ä–∞–Ω –≤–æ –≤—Ä–µ–º—è —á–∏—Å—Ç–∫–∏ –∑—É–±–æ–≤. –≠—Ç–æ –º–æ–∂–µ—Ç —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å –¥–æ 10 –ª–∏—Ç—Ä–æ–≤ –≤–æ–¥—ã.",
        "–°–æ–±–∏—Ä–∞–π—Ç–µ –¥–æ–∂–¥–µ–≤—É—é –≤–æ–¥—É –¥–ª—è –ø–æ–ª–∏–≤–∞ –∫–æ–º–Ω–∞—Ç–Ω—ã—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π.",
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ—Å—É–¥–æ–º–æ–µ—á–Ω—É—é –º–∞—à–∏–Ω—É –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ ‚Äî —ç—Ç–æ —ç–∫–æ–Ω–æ–º–Ω–µ–µ, —á–µ–º –º—ã—Ç—å –ø–æ—Å—É–¥—É –≤—Ä—É—á–Ω—É—é –ø–æ–¥ –ø—Ä–æ—Ç–æ—á–Ω–æ–π –≤–æ–¥–æ–π."
    ],
    "–ü–ª–∞—Å—Ç–∏–∫": [
        "–û—Ç–∫–∞–∂–∏—Ç–µ—Å—å –æ—Ç –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–π –ø–æ—Å—É–¥—ã. –ù–æ—Å–∏—Ç–µ —Å —Å–æ–±–æ–π –º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–π –ª–∞–Ω—á-–±–æ–∫—Å –∏ —Å—Ç–æ–ª–æ–≤—ã–µ –ø—Ä–∏–±–æ—Ä—ã.",
        "–ü–æ–∫—É–ø–∞–π—Ç–µ –Ω–∞–ø–∏—Ç–∫–∏ –≤ —Å—Ç–µ–∫–ª—è–Ω–Ω–æ–π –∏–ª–∏ –∞–ª—é–º–∏–Ω–∏–µ–≤–æ–π —Ç–∞—Ä–µ, –∫–æ—Ç–æ—Ä—É—é –ª–µ–≥—á–µ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞—Ç—å.",
        "–í—ã–±–∏—Ä–∞–π—Ç–µ —Ç–æ–≤–∞—Ä—ã –±–µ–∑ –ª–∏—à–Ω–µ–π –ø–ª–∞—Å—Ç–∏–∫–æ–≤–æ–π —É–ø–∞–∫–æ–≤–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–≤–æ—â–∏ –∏ —Ñ—Ä—É–∫—Ç—ã –Ω–∞ —Ä–∞–∑–≤–µ—Å."
    ]
}


# --- –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π (FSM) –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ ---
class Settings(StatesGroup):
    choosing_category = State()


# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def get_main_menu_keyboard():
    buttons = [
        [InlineKeyboardButton(text="‚úÖ –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data="get_task")],
        [InlineKeyboardButton(text="üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="my_progress")],
        [InlineKeyboardButton(text="üí° –≠–∫–æ-—Å–æ–≤–µ—Ç", callback_data="get_tip")],
        # [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")], # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        [InlineKeyboardButton(text="‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_task_keyboard(task_id: int):
    buttons = [
        [
            InlineKeyboardButton(text="‚úîÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"task_done_{task_id}"),
            InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"task_skip_{task_id}")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_tips_category_keyboard():
    buttons = [
        [InlineKeyboardButton(text="üí° –≠–Ω–µ—Ä–≥–∏—è", callback_data="tip_cat_–≠–Ω–µ—Ä–≥–∏—è")],
        [InlineKeyboardButton(text="üíß –í–æ–¥–∞", callback_data="tip_cat_–í–æ–¥–∞")],
        [InlineKeyboardButton(text="‚ôªÔ∏è –ü–ª–∞—Å—Ç–∏–∫", callback_data="tip_cat_–ü–ª–∞—Å—Ç–∏–∫")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ---
bot = Bot(token=API_TOKEN)
dp = Dispatcher()


# --- –•—ç–Ω–¥–ª–µ—Ä—ã (–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π) ---
@dp.message(CommandStart())
async def send_welcome(message: Message):
    """
    –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç –∫–æ–º–∞–Ω–¥—É /start
    """
    user_id = message.from_user.id
    user_name = message.from_user.first_name

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—à—É "–±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö", –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
    if user_id not in users_data:
        users_data[user_id] = {'points': 0, 'level': 1, 'completed_tasks': set()}

    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã\n\n"
        "–Ø ‚Äî –≤–∞—à **–≠–∫–æ-–¢—Ä–µ–∫–µ—Ä**, –ø–æ–º–æ—à–Ω–∏–∫ –ø–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—é –ø–æ–ª–µ–∑–Ω—ã—Ö —ç–∫–æ-–ø—Ä–∏–≤—ã—á–µ–∫.\n\n"
        "–î–∞–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ —Å–¥–µ–ª–∞–µ–º –º–∏—Ä —á–∏—â–µ! –ö–∞–∂–¥—ã–π –¥–µ–Ω—å —è –±—É–¥—É –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –≤–∞–º –Ω–µ–±–æ–ª—å—à–æ–µ –∑–∞–¥–∞–Ω–∏–µ. "
        "–í—ã–ø–æ–ª–Ω—è—è –∏—Ö, –≤—ã –±—É–¥–µ—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–∞–ª–ª—ã, –ø–æ–≤—ã—à–∞—Ç—å —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –∏, —Å–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ, "
        "–≤–Ω–æ—Å–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –≤–∫–ª–∞–¥ –≤ –∑–∞—â–∏—Ç—É –Ω–∞—à–µ–π –ø–ª–∞–Ω–µ—Ç—ã. üåç\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å."
    )

    await message.answer(welcome_text, parse_mode="Markdown", reply_markup=get_main_menu_keyboard())


@dp.callback_query(F.data == "main_menu")
async def back_to_main_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.edit_text(
        "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=get_main_menu_keyboard()
    )
    await callback.answer()


# --- –õ–æ–≥–∏–∫–∞ –∑–∞–¥–∞–Ω–∏–π ---

@dp.callback_query(F.data == "get_task")
async def get_new_task(callback: CallbackQuery):
    """–í—ã–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–æ–≤–æ–µ —Å–ª—É—á–∞–π–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ"""
    user_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
    if user_id in user_tasks and user_tasks[user_id]:
        await callback.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ. –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ.", show_alert=True)
        return

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª
    available_tasks = list(set(TASKS.keys()) - users_data.get(user_id, {}).get('completed_tasks', set()))

    # –ï—Å–ª–∏ –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    if not available_tasks:
        users_data[user_id]['completed_tasks'] = set()
        available_tasks = list(TASKS.keys())
        await callback.answer("–í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è! –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –∫—Ä—É–≥.", show_alert=True)

    random_task_id = random.choice(available_tasks)
    task = TASKS[random_task_id]

    msg = await callback.message.edit_text(
        f"–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –≤–∞—Å:\n\n**{task['text']}**\n\nüèÖ **–ù–∞–≥—Ä–∞–¥–∞:** {task['points']} –æ—á–∫–æ–≤.",
        parse_mode="Markdown",
        reply_markup=get_task_keyboard(random_task_id)
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–¥–∞–Ω–Ω–æ–º –∑–∞–¥–∞–Ω–∏–∏
    user_tasks[user_id] = {'task_id': random_task_id, 'message_id': msg.message_id}
    await callback.answer()


@dp.callback_query(F.data.startswith("task_done_"))
async def process_task_done(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è"""
    user_id = callback.from_user.id
    task_id = int(callback.data.split("_")[-1])

    if user_id not in user_tasks or user_tasks[user_id]['task_id'] != task_id:
        await callback.answer("–≠—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ.", show_alert=True)
        return

    task_info = TASKS[task_id]
    points_earned = task_info['points']

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users_data[user_id]['points'] += points_earned
    users_data[user_id]['completed_tasks'].add(task_id)

    # –õ–æ–≥–∏–∫–∞ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–∂–¥—ã–µ 100 –æ—á–∫–æ–≤)
    new_level = (users_data[user_id]['points'] // 100) + 1
    level_up_message = ""
    if new_level > users_data[user_id]['level']:
        users_data[user_id]['level'] = new_level
        level_up_message = f"üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ {new_level} —É—Ä–æ–≤–Ω—è!** üéâ\n\n"

    # –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
    del user_tasks[user_id]

    await callback.message.edit_text(
        f"{level_up_message}"
        f"–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! ‚úÖ\n\n"
        f"–í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ: ¬´{task_info['text']}¬ª\n"
        f"–ò –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ **+{points_earned}** –æ—á–∫–æ–≤.\n"
        f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: **{users_data[user_id]['points']}** –æ—á–∫–æ–≤.",
        parse_mode="Markdown",
        reply_markup=get_main_menu_keyboard()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é
    )
    await callback.answer("–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!")


@dp.callback_query(F.data.startswith("task_skip_"))
async def process_task_skip(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –∑–∞–¥–∞–Ω–∏—è"""
    user_id = callback.from_user.id
    task_id = int(callback.data.split("_")[-1])

    if user_id not in user_tasks or user_tasks[user_id]['task_id'] != task_id:
        await callback.answer("–≠—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ.", show_alert=True)
        return

    # –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
    del user_tasks[user_id]

    await callback.message.edit_text(
        "–ü–æ–Ω—è—Ç–Ω–æ. –í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ.\n\n"
        "–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å –Ω–æ–≤–æ–µ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
        reply_markup=get_main_menu_keyboard()
    )
    await callback.answer("–ó–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ.")


# --- –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞, —Å–æ–≤–µ—Ç–æ–≤ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ---

@dp.callback_query(F.data == "my_progress")
async def show_my_progress(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id

    if user_id not in users_data:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –∫–æ–º–∞–Ω–¥–æ–π /start", show_alert=True)
        return

    data = users_data[user_id]
    progress_text = (
        f"üìä **–í–∞—à –≠–∫–æ-–ü—Ä–æ–≥—Ä–µ—Å—Å** üìä\n\n"
        f"‚≠ê **–£—Ä–æ–≤–µ–Ω—å:** {data['level']}\n"
        f"üèÖ **–û—á–∫–∏:** {data['points']}\n"
        f"‚úÖ **–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π:** {len(data['completed_tasks'])}\n\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! –ö–∞–∂–¥–æ–µ –º–∞–ª–µ–Ω—å–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–º–µ–µ—Ç –±–æ–ª—å—à–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ."
    )

    await callback.message.edit_text(progress_text, parse_mode="Markdown", reply_markup=get_main_menu_keyboard())
    await callback.answer()


@dp.callback_query(F.data == "get_tip")
async def ask_for_tip_category(callback: CallbackQuery):
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–æ–≤–µ—Ç–∞"""
    await callback.message.edit_text("–û —á—ë–º –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç?", reply_markup=get_tips_category_keyboard())
    await callback.answer()


@dp.callback_query(F.data.startswith("tip_cat_"))
async def send_random_tip(callback: CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Å–æ–≤–µ—Ç –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category = callback.data.split("_")[-1]
    tip = random.choice(TIPS[category])

    await callback.message.edit_text(
        f"**üí° –≠–∫–æ-—Å–æ–≤–µ—Ç ({category}):**\n\n{tip}",
        parse_mode="Markdown",
        reply_markup=get_tips_category_keyboard()  # –û—Å—Ç–∞–≤–ª—è–µ–º –º–µ–Ω—é —Å–æ–≤–µ—Ç–æ–≤
    )
    await callback.answer()


@dp.callback_query(F.data == "about")
async def show_about_info(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"""
    about_text = (
        "**ü§ñ –û –±–æ—Ç–µ ¬´–≠–∫–æ-–¢—Ä–µ–∫–µ—Ä¬ª**\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º –ª–µ–≥–∫–æ –∏ –∏–≥—Ä–∞—é—á–∏ –≤–Ω–µ–¥—Ä–∏—Ç—å –≤ —Å–≤–æ—é –∂–∏–∑–Ω—å "
        "—ç–∫–æ–ª–æ–≥–∏—á–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏.\n\n"
        "**–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?**\n"
        "1. –ë–µ—Ä–∏—Ç–µ **–Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ**.\n"
        "2. –û—Ç–º–µ—á–∞–π—Ç–µ –µ–≥–æ **–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ** –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –æ—á–∫–∏.\n"
        "3. –ü–æ–≤—ã—à–∞–π—Ç–µ —Å–≤–æ–π **—É—Ä–æ–≤–µ–Ω—å** –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ **–ø—Ä–æ–≥—Ä–µ—Å—Å**.\n"
        "4. –ß–∏—Ç–∞–π—Ç–µ **—ç–∫–æ-—Å–æ–≤–µ—Ç—ã**, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –Ω–æ–≤–æ–≥–æ.\n\n"
        "–î–∞–∂–µ –º–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ –≤–µ–¥—É—Ç –∫ –±–æ–ª—å—à–∏–º –ø–µ—Ä–µ–º–µ–Ω–∞–º! üíö"
    )
    await callback.message.edit_text(about_text, parse_mode="Markdown", reply_markup=get_main_menu_keyboard())
    await callback.answer()


# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ---
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Webhooks –≤–º–µ—Å—Ç–æ polling
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())